//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Practicum6.SOAPService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SOAPService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllProducts", ReplyAction="http://tempuri.org/IService/GetAllProductsResponse")]
        WebService.Models.ProductModel[] GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllProducts", ReplyAction="http://tempuri.org/IService/GetAllProductsResponse")]
        System.Threading.Tasks.Task<WebService.Models.ProductModel[]> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProductById", ReplyAction="http://tempuri.org/IService/GetProductByIdResponse")]
        WebService.Models.ProductModel GetProductById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProductById", ReplyAction="http://tempuri.org/IService/GetProductByIdResponse")]
        System.Threading.Tasks.Task<WebService.Models.ProductModel> GetProductByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAll", ReplyAction="http://tempuri.org/IService/GetAllResponse")]
        WebService.Models.UserModel[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAll", ReplyAction="http://tempuri.org/IService/GetAllResponse")]
        System.Threading.Tasks.Task<WebService.Models.UserModel[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserById", ReplyAction="http://tempuri.org/IService/GetUserByIdResponse")]
        WebService.Models.UserModel GetUserById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserById", ReplyAction="http://tempuri.org/IService/GetUserByIdResponse")]
        System.Threading.Tasks.Task<WebService.Models.UserModel> GetUserByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterUser", ReplyAction="http://tempuri.org/IService/RegisterUserResponse")]
        WebService.Models.UserModel RegisterUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterUser", ReplyAction="http://tempuri.org/IService/RegisterUserResponse")]
        System.Threading.Tasks.Task<WebService.Models.UserModel> RegisterUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoginUser", ReplyAction="http://tempuri.org/IService/LoginUserResponse")]
        WebService.Models.UserModel LoginUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoginUser", ReplyAction="http://tempuri.org/IService/LoginUserResponse")]
        System.Threading.Tasks.Task<WebService.Models.UserModel> LoginUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTransactions", ReplyAction="http://tempuri.org/IService/GetAllTransactionsResponse")]
        WebService.Models.TransactionModel[] GetAllTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTransactions", ReplyAction="http://tempuri.org/IService/GetAllTransactionsResponse")]
        System.Threading.Tasks.Task<WebService.Models.TransactionModel[]> GetAllTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTransactionById", ReplyAction="http://tempuri.org/IService/GetTransactionByIdResponse")]
        WebService.Models.TransactionModel GetTransactionById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTransactionById", ReplyAction="http://tempuri.org/IService/GetTransactionByIdResponse")]
        System.Threading.Tasks.Task<WebService.Models.TransactionModel> GetTransactionByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateNewTransaction", ReplyAction="http://tempuri.org/IService/CreateNewTransactionResponse")]
        WebService.Models.TransactionModel CreateNewTransaction(int userId, int[] productIds, int[] productAmounts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateNewTransaction", ReplyAction="http://tempuri.org/IService/CreateNewTransactionResponse")]
        System.Threading.Tasks.Task<WebService.Models.TransactionModel> CreateNewTransactionAsync(int userId, int[] productIds, int[] productAmounts);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Practicum6.SOAPService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Practicum6.SOAPService.IService>, Practicum6.SOAPService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebService.Models.ProductModel[] GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<WebService.Models.ProductModel[]> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public WebService.Models.ProductModel GetProductById(int id) {
            return base.Channel.GetProductById(id);
        }
        
        public System.Threading.Tasks.Task<WebService.Models.ProductModel> GetProductByIdAsync(int id) {
            return base.Channel.GetProductByIdAsync(id);
        }
        
        public WebService.Models.UserModel[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<WebService.Models.UserModel[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public WebService.Models.UserModel GetUserById(int id) {
            return base.Channel.GetUserById(id);
        }
        
        public System.Threading.Tasks.Task<WebService.Models.UserModel> GetUserByIdAsync(int id) {
            return base.Channel.GetUserByIdAsync(id);
        }
        
        public WebService.Models.UserModel RegisterUser(string username) {
            return base.Channel.RegisterUser(username);
        }
        
        public System.Threading.Tasks.Task<WebService.Models.UserModel> RegisterUserAsync(string username) {
            return base.Channel.RegisterUserAsync(username);
        }
        
        public WebService.Models.UserModel LoginUser(string username, string password) {
            return base.Channel.LoginUser(username, password);
        }
        
        public System.Threading.Tasks.Task<WebService.Models.UserModel> LoginUserAsync(string username, string password) {
            return base.Channel.LoginUserAsync(username, password);
        }
        
        public WebService.Models.TransactionModel[] GetAllTransactions() {
            return base.Channel.GetAllTransactions();
        }
        
        public System.Threading.Tasks.Task<WebService.Models.TransactionModel[]> GetAllTransactionsAsync() {
            return base.Channel.GetAllTransactionsAsync();
        }
        
        public WebService.Models.TransactionModel GetTransactionById(int id) {
            return base.Channel.GetTransactionById(id);
        }
        
        public System.Threading.Tasks.Task<WebService.Models.TransactionModel> GetTransactionByIdAsync(int id) {
            return base.Channel.GetTransactionByIdAsync(id);
        }
        
        public WebService.Models.TransactionModel CreateNewTransaction(int userId, int[] productIds, int[] productAmounts) {
            return base.Channel.CreateNewTransaction(userId, productIds, productAmounts);
        }
        
        public System.Threading.Tasks.Task<WebService.Models.TransactionModel> CreateNewTransactionAsync(int userId, int[] productIds, int[] productAmounts) {
            return base.Channel.CreateNewTransactionAsync(userId, productIds, productAmounts);
        }
    }
}
